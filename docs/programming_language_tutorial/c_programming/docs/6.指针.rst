6.指针
======

6.1.什么是指针？
--------------------------

   前面已经知道在定义变量的时候系统会分配内存单元,如int型变量分配4个字节存储单元。在内存中每个存储单元都有一个编号,也被称为“地址”。通过地址就能过访问变量。也可以说,地址指向该变量单元,地址也被形象的称为指针。

   定义一个变量用来存放另外一个变量的地址,存放另外一个变量地址的变量称为指针变量,变量的地址也称为该变量的指针。指针变量的值就是地址,这个地址指向另外一个变量。

   我们可以通过变量名来访问变量值,如int a=10;printf("%d",a);通过变量名就能打印变量a的值10,为什么还要大费周章通过指针来访问变量呢？这个问题的答案将在后面的学习中逐渐明白。

6.2.指针变量
------------------------

   前面已经知道定义一个变量用来存放另外一个变量的指针,则称存放指针的变量为指针变量。

.. code-blockc
   :caption: c test
   :emphasize-lines: 4,5
   :linenos:

   #include <stdio.h>

   int main(void)
   {
     int a=10;     //定义int型变量
     int *point;   //定义int型指针变量,在定义指针变量时候使用的*是标志这个变量是指针变量
     point = &a;   //通过取址符&来获取变量a的地址,再将a的地址赋值给指针变量
     printf("%d",*point); //这里面*是指取指针变量所指向变量的值。
     return 0;
   }

6.2.1.如何定义指针变量
~~~~~~~~~~~~~~~~~~~~~~~~~~

   数据类型\*指针变量名;
   int *point;
   定义int指针就限定了只能够存放int型变量的地址。同理定义float指针只能够存放float型变量的地址。由此可以总结出一个变量的指针的两层含义:一是指针变量存储该变量的地址,二是指向变量的数据类型。
   1.指针变量前面的*表示该变量是指针型变量。如int *point;表示point是指针变量,变量名为point,而不是*point是指针变量。
   2.在定义指针变量的时候必须指定数据类型。

6.2.2.如何引用指针变量
~~~~~~~~~~~~~~~~~~~~~~~~~~~

   1.给指针变量赋值,point = &a;
   2.引用指针变量指向的变量,如果执行point = &a;则可以通过printf("%d",*p);来输出变量a的值,也可以通过*point = 10;的方式将变量a赋值为10。
   3.引用指针变量的值,如果执行point = &a;指针变量的值就是变量a的地址。

   & 取值符,&a表示获取变量a的地址。
   * 指针运算符,在定义变量的时候表示这个变量是指针变量,在引用指针变量时表示指针变量所指向的变量的值。

6.2.3.指针变量作为函数参数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   函数的参数中不单可以是整形、浮点型、字符型,还可以是指针类型。它可以将一个变量的指针传递到函数中。

   思考:我们已经可以将变量的值传递到函数中,为什么还要传递变量的指针呢？

   示例:输入两个整数,比较大小后输出。

.. code-blockc
   :caption: c test
   :emphasize-lines: 4,5
   :linenos:

   #include <stdio.h>

   void swap(int *point1,int *point2);

   int main(void)
   {
       int a,b;
       int *point3,*point4;
       
       printf("请输入两个整数:");
       scanf("%d,%d",&a,&b);
       
       point3 = &a;
       point4 = &b;
       
       if(a < b)
       {
           swap(point3,point4); 
       }
       printf("max=%d,min=%d",a,b);
       return 0;
   }

   void swap(int *point1,int *point2)
   {
       int temp;
       
       temp = *point1;
       *point1 = *point2;
       *point2 = temp;
   }

   分析:point3 = &a;point4 = &b;将变量a和b的地址赋给指针变量,当a小于b时候通过swap()函数交换了变量a和b的地址,所以a输出原b的值,b输出原a的值。

   思考:如果上面的示例改为如下写法结果又是什么呢。

.. code-blockc
   :caption: c test
   :emphasize-lines: 4,5
   :linenos:

   #include <stdio.h>

   void swap(int num1,int num2);

   int main(void)
   {
       int a,b;
       
       printf("请输入两个整数:");
       scanf("%d,%d",&a,&b);
       
       if(a < b)
       {
           swap(a,b); 
       }
       printf("max=%d,min=%d",a,b);
       return 0;
   }

   void swap(int num1,int num2)
   {
       int temp;
       
       temp = num1;
       num1 = num2;
       num2 = temp;
   }

   分析:当a小于b时将变量a和b的值分别赋给函数的参数num1和num1,在函数内进行了变量num1和num2值的交换,并没要交换变量a和b的值,因此上面代码不能实现比较大小的功能。

6.3.通过指针引用数组
-----------------------------

6.4.通过指针引用字符串
-----------------------------

6.5.指向函数的指针
---------------------------

6.6.返回指针值的函数
---------------------------

6.7.指针数组和多重指针
-------------------------------

6.8.动态内存分配与指向它的指针变量
--------------------------------------------