5.数组
======



   假设要统计一列动车上有多少旅客,我们可以先统计有多少车厢,然后乘以每节车厢的人数,就是一列动车的人数。如果一列动车有20节,按照前面学习定义变量的方法,则需要定义20个变量。我们编写代码的初衷的方便的解决问题,这显然违背了我们编写代码的初衷。下面就要介绍C语言的另一个概念“数组”,用来存储大量类型一致的数据。

5.1.一维数组
-------------------

   数组是存储一类数据的集合,先需要指定数组的类型,然后指定数组的大小。

5.1.1.定义一维数组
~~~~~~~~~~~~~~~~~~~~~~~~~

   数据类型 数组名[常量表达式];
   int a[10];

   1.数据类型表示数组中只能存放什么数据类型的数据,切存储的数据类型必须一致。
   2.数组名的命名规则与变量命名规则相同。
   3.定义数组是必须指定数组的长度,也就是数组存储数据的个数,例如int a[10];表示数组能够存储10个int的数据,分别是a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],不包括a[10]。

5.1.2.引用一维数组
~~~~~~~~~~~~~~~~~~~~~~~~~

5.1.3.初始化一维数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



   1.在定义时候对数组全部元素初始化。
   int a[10] = {0,1,2,3,4,5,6,7,8,9};
   2.在定义时候对数组部分元素初始化,未初始化部分元素全部自动初始化为0。
   int a[10] = {0,1,2,3,4};
   3.数组全部元素初始化为0；
   int a[10] = {0};
   4.对数组全部初始化时候,由于数组元素个数等于数组长度,可以省略指定数组长度。
   int a[] = {1,2,3,4,5};
   5.如果没有对数组初始化,系统会自动初始化为0,字符型数组初始化为'\0',指针数组初始化为NULL空指针。

5.2.二维数组
^^^^^^^^^^^^

5.2.1.定义二维数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.2.2.引用二维数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.2.3.初始化二维数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.3.字符数组
---------------------------

5.3.1.定义字符数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.3.2.引用字符数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.3.3.初始化字符数组
~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.4.字符串处理函数
----------------------------

   C语言中提供一系列的字符串处理函数,通过这些函数可以方便的对字符串进行切片、连接的等操作。

5.4.1.put和get函数
~~~~~~~~~~~~~~~~~~~~~~~~

   put()函数可以输出字符串,例如char str[]={"hello,world!"};put(str);向屏幕输出字符串hello,world!,但是可以使用printf("%s",str);代替,因此使用put()函数就不多。

   get()函数可以获取输入的字符串,char str[20] = "\0";gets(str);printf("%s\n", str);get()函数将键盘输入的字符串存储在str数组中,然后通过printf()函数打印。同样get()函数也可以通过scanf("%s",&str)来代替。

5.4.2.获取字符串长度
~~~~~~~~~~~~~~~~~~~~~~~~~

   strlen()函数是用来计算字符串长度的函数,直到字符串中第一个'\n'结束。例如char str[10]={"Apple"};printf("%d",strlen(str));输出为5,在前面字符数组的部分初始化已经知道,未被初始化部分填充'\n'。所以输出5。改写为char str[10]={"Apple"};str[3]='\n';printf("%d",strlen(str));输出的结果是3,只计算了前三位的长度,后面的全部被忽略。

   sizeof是一个关键字,其作用是返回一个对象或类型所占的内存字节数。
   sizeof有三种语法形式:
   1.sizeof (object);     //sizeof (对象)
   2.sizeof object;       //sizeof 对象
   3.sizeof (type_name);  //sizeof (类型)

   1.基本数据类型的sizeof,计算数据类型sizeof(int)的结果是4,计算变量int a=5;sizeof(a);结果也是4,也可以写作int a=5;sizeof a;
   2.结构体的sizeof,struct S1{char a;int b;};sizeof(S1); 值为8,字节对齐,在char之后会填充3个字节。  
   3.联合体的sizeof,union u{int a;float b;double c;char d;};sizeof(u); //值为8  
   4.数组的sizeof
   5.指针的sizeof
   6.函数的sizeof

   strlen与sizeof的区别

5.4.3.字符串连接函数
~~~~~~~~~~~~~~~~~~~~~~~~~~

   strlen(str1,str2);strcat()函数用来将两个函数连接起来,将字符串2连接在字符串1的后面。
   char str1[20]={"hello,"};char str2[]={"world!"};printf("%s",strcat(str1,str2));

5.4.4.字符串拷贝函数
~~~~~~~~~~~~~~~~~~~~~~~~~

   strcpy()函数的一般形式是strcpy(数字符数组,字符串),将字符串的值复制到字符数组中,需要注意以下几点:
   1.第一个参数字符数组长度必须足够大,能够完全容纳下第二个参数字符串。
   2.第一个参数字符数组必须写成数组的形式,第二个参数字符串也可以是字符数组或者字符串常量。
   3.第二个参数字符串及其后的'\0'只会覆盖第一个参数字符数组中的前字符串长度加1的长度,其余保持原来内容。
   4.不可以使用赋值语句来拷贝字符常量或者字符数组给一个字符数组。
   strncpy()函数一般形式是strncpy(字符数组,字符串,n),将字符串中的前n位拷贝到字符数组中。

   strcpy()和strncpy()深层次对比

5.4.5.字符串比较函数
~~~~~~~~~~~~~~~~~~~~~~~~~

   strcmp()函数的一般形式是strcmp(字符串1,字符串2),比较的规则是:将字符串自左到右的字符逐个比较ASCLL码的值,直到出现不同或者'\n'。比较第一个不同位置的ASCLL值,ASCLL大则字符串大。由ASCLL码规律可知,排在26字母靠后的ASCLL值大,小写字母ASCLL大于大写字母ASCLL。比较结果:
   1.如果字符串1等于字符串2,函数返回值为0。
   2.如果字符串1大于字符串2,函数返回值为正整数。
   3.如果字符串1小于字符串2,函数返回为负整数。

5.4.6.其他字符串相关函数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~