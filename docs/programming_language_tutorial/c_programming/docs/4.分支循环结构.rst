4.分支循环结构
==============

4.1.分支结构
------------------

C语言中使用两种选择语句, ``一是if语句来实现两个分支的选择结构,二是switch语句来实现多分支的选择结构``。

4.1.1.if语句
~~~~~~~~~~~~~~~~~~~~~~~~~~

在前面已经学习C语言可以通过关系表达式来描述i > 10或者i < 10这类问题,是如何描述“如果”这个条件呢？在C语言中使用if语句来描述条件判断,用else语句描述否则判断。

.. code-block:: c
   :caption: if语句使用举例
   :linenos:

    /***************************************************************
    * @file       area_circle.c
    * @brief      比较两个实数大小，并按照由大到小输出
    * @author     奈斯创新
    **************************************************************/
   #include <stdio.h>

   int main(void)
   {
       float value1,value2; 
       float temp;
       
       printf("请输入两个实数\r\n");               //打印提醒信息
       scanf("%f,%f",&value1,&value2);           //获取键盘输入

       if(value2 > value1)
       {
           temp = value1;
           value1 = value2;
           value2 =temp;
       }
       printf("%f,%f\r\n",value1,value2);  
       return 0;
   }

.. code-block:: c
   :caption: if语句使用举例
   :linenos:

   #include <stdio.h>

   int main(void)
   {
       int age; 
       
       printf("请输入年龄\r\n");     //打印提醒信息
       scanf("%d",&age);           //获取键盘输入

       if(age > 18)
       {
           printf("已经成年啦！\r\n");    
       }
       else
       {
           printf("未成年！\r\n");    
       }
       return 0;
   }

.. code-block:: c
   :caption: if语句的一般形式
   :linenos:

   //C语言中if语句的表现形式有三种:

   //一是:
   if(表达式)
   {
       //逻辑值为真则执行
   }

   //二是:
   if(表达式)
   {
       //逻辑值为真则执行
   }
   else
   {
       //逻辑值为假则执行
   }

4.1.2.switch语句
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C语言通过switch语句实现多分支选择，也可以通过if语句的嵌套来实现多分支选择，但switch语句更加简洁，增加代码的可读性。

.. code-block:: c
   :caption: switch语句使用举例
   :linenos:

    /***************************************************************
    * @brief      输入数字，返回星期几
    * @author     奈斯编程
    **************************************************************/

    #include <stdio.h>

    int main(void)
    {
        int day = 0;
        printf("请输入一个数字\n");
        scanf("%d", &day);
        switch (day)
        {
            case 1:printf("星期一\r\n");break;    
            case 2:printf("星期二\r\n");break;
            case 3:printf("星期三\r\n");break;
            case 4:printf("星期四\r\n");break;
            case 5:printf("星期五\r\n");break;
            case 6:printf("星期六\r\n");break;
            case 7:printf("星期天\r\n");break;
            default:printf("输入错误\r\n");break;
        }
        return 0;
    }

从键盘获取输入的数字，并赋值给day变量，switch将dayd的值与各个case的值进行比较，如果和其中一个相同，则会执行这个case后面的语句，本例为printf打印，如果没有找到则执行default后面的语句。

.. code-block:: c
   :caption: switch语句使用举例，常量表达式为字符
   :linenos:

   #include <stdio.h>

   int main(void)
   {
       char ch;
       printf("请输入成绩A-Z: ");
       scanf("%c,&ch");
       
       switch(ch)
       {
           case 'A':printf("你的成绩在90分以上! \n");break;  
           case 'B':printf("你的成绩在80~89分以上! \n");break;  
           case 'C':printf("你的成绩在70~79分以上! \n");break;  
           case 'D':printf("你的成绩在60~69分以上! \n");break;  
           case 'E':printf("你的成绩在60分以下! \n");break;  
           default:printf("请输入有效的成绩评级! \r");break;  
       }
       return 0;
   }

与上一个例子不同的是这个例子输入的是字符，通过比较字符是否相等来判断执行哪个case后面的语句。可能会有疑问，字符也可以比较大小吗？我们知道字符是通过ASCII码的方式存放在存储单元中的，通过比较ASCII码值的大小来比较字符的大小。例如大写字母'A'的ASCII码值为65，而大写字母'B'的ASCII码值为66，所以字符'B'大于字符'A'。这个例子中将case 'A'替换为case 65，程序执行的结果是一致的。

.. code-block:: c
   :caption: switch语句一般形式
   :linenos:

   switch(表达式)
   {
       case 常量表达式:语句或者代码块
       case 常量表达式:语句或者代码块
       ...
       case 常量表达式:语句或者代码块
       default:语句或者代码块
   }

.. note::

   - switch后面括号内的“表达式”，其值应该为整形（包括字符型）。
   - 如果没有与switch表达式相匹配的case常量，流程转到default后面的语句。
   - 可以没有default语句，此时如果没有与switch表达式相匹配的case常量，流程直接跳出switch语句。
   - case常量出现的次序不影响执行的结果，且每个case常量必须互不相等。
   - switch表达式找到相匹配的case常量后不在进行case常量判断，执行其后case的所有语句，直到遇到break语句跳出或者switch语句执行结束。


4.1.1.if分支嵌套
~~~~~~~~~~~~~~~~~~~~~~~

如果一个if语句中包含另外一个if语句,就称为if语句的嵌套,也称为分支结构的嵌套。


.. code-block:: c
   :caption: if分支嵌套使用举例
   :linenos:

    #include <stdio.h>

    int main()
    {
        int year,leap;
        printf("enter year:");
        scanf(" %d",&year);
        
        if (year%4==0)
        {
            if( year%100==0)
            {
                if(year%400= =0)
                {
                    leap=13;
                }
                else
                {
                    leap=0;
                }
            }
            else
            {
                leap=1;
            }
        else
        {
            leap=0;
        }
        if(leap)
        {
            printf("%d is" ,year);
        }
        else
        {
            printf("%d is not",year);
        }            
        printf("a leap year.\n") ;

        return 0;
    }

.. code-block:: c
   :caption: if分支嵌套一般形式
   :linenos:

   if(表达式)
   {
       if(表达式)
       {
           语句或者代码块
       }
       else
       {
           语句或者代码块
       }
   }
   else
   {
       if(表达式)
       {
           语句或者代码块
       }
       else
       {
           语句或者代码块
       }
   }


4.1.2.switch与if分支嵌套的区别
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   - if语句可以进行大小取值范围的判断
   - if语句可以对浮点数进行判断
   - switch语句只能进行相等与否判断
   - switch语句进行整数的判断
   - switch语句进行整数的判断,case标签只能是常量


4.2.循环结构
----------------------

C语言中有3种方式实现循环语句。

4.2.1.while语句
~~~~~~~~~~~~~~~~~~~~~~~~


   while语句中只要表达式的值为真,则执行循环体,直到表达式为假。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   while (表达式)
   {
       //循环体
   }


4.2.2.do-while语句
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



4.2.3.for语句
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C语言中第3种实现循环结构的是for语句,相比较于while和do-while语句,for循环更加简洁、灵活。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   for(表达式1;表达式2;表达式3)
   {
   //循环体
   }



实现一个火箭发射10秒倒计时的函数。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   #include <stdio.h>

   int main(void)
   {
       for(int i=1;i<=10;i++)
       {
           printf("%d\n",i);
       }
       printf("点火");
       return 0;
   }

问题:实现判断一个数是不是素数？

分析:素数又称质数。所谓素数是指除了1和它本身以外,不能被任何整数整除的数,反之称之为合数。0和1既不是素数也不是合数。可以用2到这个数本身一个数一个数试的方法,在这个数不是很大的情况下显然是可行的。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   #include <stdio.h>

   int main(void)
   {
       printf("请输入一个整数!");
       int num;
       scanf("%d",&num);
     for(int i=2;i<=num;i++)
       {
           if(num % i == 0)
           {
               printf("%d不是一个素数!\n",num);
           }
           else
           {
               printf("%d是一个素数!\n",num);
           }
           printf("%d\n",i);
       }
       return 0;
   }


实现乘法表打印。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   #include <stdio.h>

   int main(void)
   {
     for(int i = 1;i <= 9;i++)
       {
           for(int j = 1;j <= i;j++)
           {
               printf("%d*%d=%d ",i,j,i*j);
           }
           printf("\n");
       }
       return 0;
   }

4.2.4.break语句
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   在switch语句中提到break语句,当时只知道break语句有跳出功能。下面具体来说break语句的用法。回到求一个数是不是素数的问题,for(int i=2;i<=num;i++)由于一个数不可能被大于其一半的数整除,所以在2到其值一半的数中能找到把它整除的数就是合数,可以改进为for(int i=2;i<=num/2;i++)。一个数可能被多个数整除,只要找到其中一个能把它整除的数即可,而不用全部遍历。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   #include <stdio.h>

   int main(void)
   {
       printf("请输入一个整数!");
       int num;
       scanf("%d",&num);
     for(int i=2;i<=num/2;i++)
       {
           if(num % i == 0)
           {
               printf("%d不是一个素数!\n",num);
         break;
           }
           else
           {
               printf("%d是一个素数!\n",num);
           }
           printf("%d\n",i);
       }
       return 0;
   }

4.2.5.continue语句
                  

前面学习了break语句,break语句用于跳出for循环,还有一种情况是跳出本轮循环,然后继续循环下一轮循环。下面引出continue语句,当满足某种条件时候,跳出本轮循环,直接执行下一轮循环。
编写一个程序输入一串字符,忽略字符中的空格,并打印出来。

.. code-block:: c
   :caption: printf函数使用举例
   :linenos:

   #include <stdio.h>

   int main()
   {    
       int str[20];
       int length =0;
       
       printf("请输入一串字符\r\n");
       scanf("%s",&str);
       length = strlen(str);
       
       for(int i=0;i>length;i--)
       {
           if(str[i] == ' ')
           {
               continue;
           }
           else
           {
               printf("%c",str[i]);
           }
       }
       return 0;
   }



4.2.6.goto语句

